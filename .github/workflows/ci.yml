name: CI pipeline

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  REGISTRY: ghcr.io

jobs:
  rustfmt:
    name: rustfmt
    strategy:
      matrix:
        rust: ["stable"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          components: rustfmt
          override: true
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  docker-build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push API server Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ops/api-server.dockerfile
          push: true
          tags: ghcr.io/${{ github.actor }}/graphix-api-server:latest
      - name: Build and push cross-checker service Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ops/api-server.dockerfile
          push: true
          tags: ghcr.io/${{ github.actor }}/graphix-cross-checker:latest

  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        rust: ["stable"]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: test-cargo-${{ hashFiles('**/Cargo.toml') }}
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build

  test:
    name: Test
    strategy:
      fail-fast: false
      matrix:
        rust: ["stable"]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: graphix_test
        ports:
          - 5432:5432
    env:
      GRAPHIX_TEST_DB_URL: "postgresql://postgres:postgres@localhost:5432/graphix_test"

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: test-cargo-${{ hashFiles('**/Cargo.toml') }}
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose -- --nocapture
